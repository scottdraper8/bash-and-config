#!/usr/local/bash5/bin/bash

##############################################################################
# rain - A customizable terminal rain animation with dynamic visual effects
#
# Creates an animated raindrop effect in the terminal with configurable 
# parameters for raindrop character, color, density, speed, and wind effects.
# Features include dynamic wind changes with realistic lulls, terminal resize 
# handling, and randomization options for a more natural appearance.
#
# Original concept by seehrum (https://www.reddit.com/r/bash/comments/1cj3xee/rainsh_raining_in_the_linux_terminal/)
# Color codes for raindrops:
# '31' - Red, '32' - Green, '33' - Yellow, '34' - Blue, '35' - Purple, '36' - Cyan, '37' - White
##############################################################################

# Function to display help information
show_help() {
    echo "Usage: raindrop-script [options]"
    echo -e "\nOptions:"
    echo "  -c, --char=CHARACTER            Character to use as raindrops. (Default: 'ðŸ’§')"
    echo -e "                                      Examples: -c @, --char='*'\n"
    echo "  --color-code=COLOR, -k=COLOR    ANSI color code for the raindrop. (Default: 35 for purple)"
    echo -e "                                      Examples: -k 32, --color-code=36\n"
    echo "  -d, --density=DENSITY           Set the density of the raindrops. (Default: 2)"
    echo -e "                                      Examples: -d 5, --density=3, -d rand\n"
    echo "  -s, --speed=SPEED               Speed of the raindrops. Values: 1 (slowest) to 5 (fastest) or 'rand'. (Default: 3)"
    echo -e "                                      Examples: -s 4, --speed=2, -s rand\n"
    echo "  -w, --wind=WIND                 Wind strength. Values: 1 (no wind) to 5 (strong wind) or 'rand'. (Default: 1)"
    echo -e "                                      Examples: -w 3, --wind=5, -w rand\n"
    echo "  -wd, --wind-dir=DIRECTION       Wind direction. Values: left, right, rand. (Default: right)"
    echo -e "                                      Examples: -wd left, --wind-dir=rand\n"
    echo "  -r, --randomize                 Enable randomization of speed, density, wind strength, and wind direction."
    echo -e "                                      By default, randomization is off.\n"
    echo "  -h, --help                      Display this help message and exit.\n"
    read -n 1 -s -r -p "Press any key to exit..."
}

# Global variables
color=35                       # ANSI color code for raindrops (default: purple)
current_wind_direction=1       # Wind direction: 1 for right, -1 for left
current_wind_strength=0        # Effective wind strength (may differ during lulls)
density=2                      # Number of raindrops to add each iteration
density_random=false           # Flag for randomizing density
dir_update_counter=0           # Counter for direction updates (reduces overhead)
last_resize_time=0             # Timestamp of last terminal resize event
loop_counter=0                 # Main animation loop counter
next_wind_dir_change=0         # Timestamp for next wind direction change
next_wind_lull=0               # Timestamp for next wind lull
rain_char='ðŸ’§'                 # Character used for raindrops
random_update_interval=15      # Seconds between random parameter updates
randomize=false                # Master flag for randomizing all parameters
resize_debounce_delay=0.2      # Seconds to wait after resize before processing
resize_pending=false           # Flag for pending resize event
speed_random=false             # Flag for randomizing speed
speed_range=3                  # Speed range for raindrops (1-5)
target_wind_strength=0         # Target wind strength during transitions
transition_step=0              # Step size for wind strength transitions
wind_dir="right"               # Wind direction: left, right, or rand
wind_lull_end=0                # Timestamp for when current wind lull ends
wind_strength=1                # Wind strength (1-5, with 1 being no wind)
wind_strength_random=false     # Flag for randomizing wind strength
wind_transitioning=false       # Flag for transitioning wind strength
wind_update_counter=0          # Counter for wind updates (reduces overhead)

# Track the position and speed of raindrops
declare -A raindrops

##############################################################################
# cleanup
# Resets terminal settings to normal state on exit.
# Shows cursor, re-enables input echoing, clears screen, and exits cleanly.
##############################################################################
cleanup() {
    tput cnorm  # Show cursor
    stty echo   # Re-enable echo
    clear
    exit 0
}

##############################################################################
# clear_entire_screen
# Efficiently clears the entire visible terminal area.
# Creates a buffer of spaces for the entire visible area and applies it at once
# for better performance than individual clearing operations.
##############################################################################
clear_entire_screen() {
    local clear_buffer=""
    local current_height=${height:-24}  # Default if not set
    local current_width=${width:-80}    # Default if not set
    
    # Generate buffer of spaces for entire screen
    for ((y=1; y<=current_height; y++)); do
        clear_buffer+="\e[${y};1H"
        for ((x=1; x<=current_width; x++)); do
            clear_buffer+=" "
        done
    done
    
    clear_buffer+="\e[H"  # Reset cursor to home
    echo -ne "$clear_buffer"
}

##############################################################################
# get_drop_speed
# Converts user-friendly speed settings (1-5) to actual pixel movement amounts.
# 
# Arguments:
#   $1 - Speed setting (1=slowest to 5=fastest)
#
# Returns:
#   Actual speed value used for raindrop movement
##############################################################################
get_drop_speed() {
    local setting=$1
    local actual_speed
    
    case $setting in
        1) actual_speed=1 ;;  # Very slow
        2) actual_speed=2 ;;  # Slow
        3) actual_speed=3 ;;  # Medium
        4) actual_speed=5 ;;  # Fast
        5) actual_speed=7 ;;  # Very fast
        *) actual_speed=3 ;;  # Default to medium
    esac
    
    echo $actual_speed
}

##############################################################################
# get_wind_shift
# Converts user-friendly wind strength (0-5) to actual horizontal movement.
# 
# Arguments:
#   $1 - Wind strength setting (0-5, where 0-1 is no wind)
#
# Returns:
#   Number of horizontal positions to shift raindrops
##############################################################################
get_wind_shift() {
    local setting=$1
    local actual_shift
    
    case $setting in
        0) actual_shift=0 ;;  # No wind (for lulls)
        1) actual_shift=0 ;;  # No wind
        2) actual_shift=1 ;;  # Light wind
        3) actual_shift=2 ;;  # Medium wind
        4) actual_shift=3 ;;  # Strong wind
        5) actual_shift=4 ;;  # Very strong wind
        *) actual_shift=0 ;;  # Default to no wind
    esac
    
    echo $actual_shift
}

##############################################################################
# initialize_screen
# Prepares the terminal for the rain animation.
# Clears screen, hides cursor, disables echo, gets terminal dimensions,
# and sets initial wind parameters.
##############################################################################
initialize_screen() {
    clear
    tput civis  # Hide cursor
    stty -echo  # Disable echo
    
    height=$(tput lines)
    width=$(tput cols)
    resize_pending=false
    
    # Setup initial wind state
    current_wind_strength=$wind_strength
    if [[ "$wind_dir" == "left" ]]; then
        current_wind_direction=-1
    elif [[ "$wind_dir" == "right" ]]; then
        current_wind_direction=1
    else # rand
        current_wind_direction=$(( RANDOM % 2 * 2 - 1 ))  # Either 1 or -1
    fi
    
    # Set timers for wind changes
    next_wind_dir_change=$(($(date +%s) + 8 + RANDOM % 13))  # 8-20 seconds
    next_wind_lull=$(($(date +%s) + 15 + RANDOM % 16))       # 15-30 seconds
}

##############################################################################
# move_raindrops
# Moves existing raindrops down and applies wind effects for horizontal movement.
# Efficiently updates all raindrop positions in a single buffer update.
# Removes raindrops that move outside the visible terminal area.
##############################################################################
move_raindrops() {
    declare -A new_positions
    local buffer=""
    
    # Safety checks for terminal dimensions
    local current_height=${height:-1}
    local current_width=${width:-1}
    [[ $current_height -lt 1 ]] && current_height=1
    [[ $current_width -lt 1 ]] && current_width=1

    # Apply wind effect
    local wind_effect=$(($(get_wind_shift $current_wind_strength) * current_wind_direction))

    # Process each raindrop
    for pos in "${!raindrops[@]}"; do
        IFS=',' read -r x y ch <<< "$pos"
        local speed=${raindrops[$pos]}
        
        # Skip out-of-bounds raindrops
        [[ $x -ge $current_width || $y -ge $current_height ]] && continue

        # Calculate new position
        local newY=$((y + speed))
        local newX=$((x + wind_effect))
        
        # Clear old position
        buffer+="\e[${y};${x}H "

        # Only keep raindrops still on screen
        if (( newY < current_height && newX >= 0 && newX < current_width )); then
            buffer+="\e[${newY};${newX}H\e[${color}m${ch}\e[0m"
            new_positions["$newX,$newY,$ch"]=$speed
        fi
    done

    # Update raindrop positions
    raindrops=()
    for k in "${!new_positions[@]}"; do
        raindrops["$k"]=${new_positions["$k"]}
    done

    # Apply all changes at once
    [[ -n "$buffer" ]] && echo -ne "$buffer"
}

##############################################################################
# place_raindrop
# Places new raindrops at random positions at the top of the screen.
# Creates raindrops based on the density parameter, with random speeds
# within the specified speed range.
##############################################################################
place_raindrop() {
    local chars=("$rain_char")
    local current_width=${width:-1} 
    [[ $current_width -lt 1 ]] && current_width=1 
    local new_drops_buffer=""
    
    # Create new raindrops based on density
    for ((i=0; i<density; i++)); do
        for ch in "${chars[@]}"; do
            local x=$((RANDOM % current_width))
            local raw_speed=$((RANDOM % speed_range + 1))
            local actual_speed=$(get_drop_speed $raw_speed)
            
            raindrops["$x,0,$ch"]=$actual_speed
            new_drops_buffer+="\e[1;${x}H\e[${color}m${ch}\e[0m"
        done
    done
    
    [[ -n "$new_drops_buffer" ]] && echo -ne "$new_drops_buffer"
}

##############################################################################
# process_resize
# Handles terminal resize events after debouncing.
# Updates terminal dimensions, resets the screen, clears all raindrops,
# and enters a stabilization period to ensure smooth visual transition.
##############################################################################
process_resize() {
    # Get new dimensions
    height=$(tput lines)
    width=$(tput cols)
    
    # Clean terminal state
    printf "\033[2J"  # Clear screen
    printf "\033[3J"  # Clear scrollback
    printf "\033[H"   # Reset cursor
    
    tput reset
    tput civis  # Hide cursor again
    
    # Reset animation state
    raindrops=()
    resize_stabilizing=true
    stabilization_counter=0
    
    clear_entire_screen
    resize_pending=false
}

##############################################################################
# randomize_vars
# Background process that periodically randomizes simulation parameters
# if randomization is enabled. Handles proper transitions for wind and
# ensures compatibility with the wind lull system.
##############################################################################
randomize_vars() {
    # Check if any randomization is enabled
    local any_randomization=$randomize
    if [[ "$speed_random" == "true" || "$density_random" == "true" || 
          "$wind_strength_random" == "true" || "$wind_dir" == "rand" ]]; then
        any_randomization=true
    fi
    
    if [[ "$any_randomization" == "true" ]]; then
        while true; do
            local current_time=$(date +%s)
            
            # Update parameters that need randomizing
            if [[ "$randomize" == "true" || "$density_random" == "true" ]]; then
                density=$((RANDOM % 10 + 1))  # Range: 1-10
            fi
            
            if [[ "$randomize" == "true" || "$speed_random" == "true" ]]; then
                speed_range=$((RANDOM % 5 + 1))  # Range: 1-5
            fi
            
            if [[ "$randomize" == "true" || "$wind_strength_random" == "true" ]]; then
                local new_wind_strength=$((RANDOM % 5 + 1))
                
                # Handle changes during lulls carefully
                if [[ "$wind_transitioning" == "true" || "$current_wind_strength" != "$wind_strength" ]]; then
                    wind_strength=$new_wind_strength
                    
                    if [[ "$wind_transitioning" == "true" && "$target_wind_strength" == "$wind_strength" ]]; then
                        target_wind_strength=$new_wind_strength
                    fi
                else
                    wind_strength=$new_wind_strength
                    current_wind_strength=$new_wind_strength
                fi
            fi
            
            if [[ "$randomize" == "true" ]]; then
                wind_dir="rand"
            fi
            
            sleep $random_update_interval
        done
    fi
}

##############################################################################
# update_dimensions
# Records terminal resize events and sets a flag for debounced processing.
# Uses debouncing to avoid performance issues with rapid resize events.
##############################################################################
update_dimensions() {
    last_resize_time=$(date +%s.%N)
    resize_pending=true
}

##############################################################################
# update_wind_direction
# Periodically updates the wind direction based on time and settings.
# For random direction, changes occur at 8-20 second intervals.
# Includes performance optimization to only run every 5 frames.
##############################################################################
update_wind_direction() {
    # Performance optimization - only run periodically
    (( dir_update_counter++ % 5 != 0 )) && return
    
    local current_time=$(date +%s)
    
    # Fixed direction mode
    if [[ "$wind_dir" != "rand" ]]; then
        current_wind_direction=$([[ "$wind_dir" == "left" ]] && echo -1 || echo 1)
        return
    fi
    
    # Random direction mode - change periodically
    if (( current_time >= next_wind_dir_change )); then
        current_wind_direction=$(( RANDOM % 2 * 2 - 1 ))  # Either 1 or -1
        next_wind_dir_change=$((current_time + 8 + RANDOM % 13))  # 8-20 seconds
    fi
}

##############################################################################
# update_wind_strength
# Periodically updates wind strength to create natural wind lulls.
# Smoothly transitions between wind states and creates periods of
# reduced or no wind for a more natural effect.
# Includes performance optimization to only run every 5 frames.
##############################################################################
update_wind_strength() {
    # Performance optimization - only run periodically
    (( wind_update_counter++ % 5 != 0 )) && return
    
    local current_time=$(date +%s)
    
    # Only create lulls if wind exists (strength > 1)
    if [[ "$wind_strength" -gt 1 ]]; then
        # Handle transitioning state
        if [[ "$wind_transitioning" == "true" ]]; then
            # Smooth transition in steps of 1
            if (( current_wind_strength < target_wind_strength )); then
                (( current_wind_strength++ ))
            elif (( current_wind_strength > target_wind_strength )); then
                (( current_wind_strength-- ))
            fi
            
            # Transition complete check
            if (( current_wind_strength == target_wind_strength )); then
                wind_transitioning=false
                
                # Set lull duration if this was a transition to lower wind
                if (( target_wind_strength < wind_strength )); then
                    wind_lull_end=$((current_time + 3 + RANDOM % 5))  # 3-7 seconds
                fi
            fi
        # Lull ending - transition back to normal
        elif (( current_wind_strength < wind_strength && current_time >= wind_lull_end )); then
            wind_transitioning=true
            target_wind_strength=$wind_strength
        # Start new lull
        elif (( current_time >= next_wind_lull && current_wind_strength == wind_strength )); then
            wind_transitioning=true
            
            # Randomize lull intensity
            if (( RANDOM % 3 == 0 )); then
                target_wind_strength=0  # Complete lull
            else
                # Partial lull
                target_wind_strength=$(( wind_strength / 2 ))
                if (( target_wind_strength >= wind_strength )); then
                    target_wind_strength=$(( wind_strength - 1 ))
                fi
            fi
            
            next_wind_lull=$((current_time + 15 + RANDOM % 16))  # 15-30 seconds
        fi
    else
        current_wind_strength=1  # Maintain minimum value
    fi
}

# Signal handling
trap cleanup SIGINT SIGTERM EXIT
trap update_dimensions SIGWINCH

# Process command-line arguments (alphabetically ordered by flag)
while [[ $# -gt 0 ]]; do
    case "$1" in
        -c=*|--char=*)
            rain_char="${1#*=}"
            shift
            ;;
        -c|--char)
            rain_char="$2"
            shift 2
            ;;
        --color-code=*|-k=*)
            color="${1#*=}"
            shift
            ;;
        --color-code|-k)
            color="$2"
            shift 2
            ;;
        -d=*|--density=*)
            density="${1#*=}"
            if [[ "$density" == "rand" ]]; then
                density=$((RANDOM % 10 + 1))
                density_random=true
            fi
            shift
            ;;
        -d|--density)
            density="$2"
            if [[ "$density" == "rand" ]]; then
                density=$((RANDOM % 10 + 1))
                density_random=true
            fi
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -r|--randomize)
            # Enable randomization for all parameters
            density=$((RANDOM % 10 + 1))
            density_random=true
            speed_range=$((RANDOM % 5 + 1))
            speed_random=true
            wind_strength=$((RANDOM % 5 + 1))
            wind_strength_random=true
            wind_dir="rand"
            randomize=true
            shift
            ;;
        -s=*|--speed=*)
            speed_range="${1#*=}"
            if [[ "$speed_range" == "rand" ]]; then
                speed_range=$((RANDOM % 5 + 1))
                speed_random=true
            else
                # Bound check
                [[ $speed_range -lt 1 ]] && speed_range=1
                [[ $speed_range -gt 5 ]] && speed_range=5
            fi
            shift
            ;;
        -s|--speed)
            speed_range="$2"
            if [[ "$speed_range" == "rand" ]]; then
                speed_range=$((RANDOM % 5 + 1))
                speed_random=true
            else
                # Bound check
                [[ $speed_range -lt 1 ]] && speed_range=1
                [[ $speed_range -gt 5 ]] && speed_range=5
            fi
            shift 2
            ;;
        -w=*|--wind=*)
            wind_strength="${1#*=}"
            if [[ "$wind_strength" == "rand" ]]; then
                wind_strength=$((RANDOM % 5 + 1))
                wind_strength_random=true
            else
                # Bound check
                [[ $wind_strength -lt 1 ]] && wind_strength=1
                [[ $wind_strength -gt 5 ]] && wind_strength=5
            fi
            shift
            ;;
        -w|--wind)
            wind_strength="$2"
            if [[ "$wind_strength" == "rand" ]]; then
                wind_strength=$((RANDOM % 5 + 1))
                wind_strength_random=true
            else
                # Bound check
                [[ $wind_strength -lt 1 ]] && wind_strength=1
                [[ $wind_strength -gt 5 ]] && wind_strength=5
            fi
            shift 2
            ;;
        -wd=*|--wind-dir=*)
            wind_dir="${1#*=}"
            # Validate input
            if [[ "$wind_dir" != "left" && "$wind_dir" != "right" && "$wind_dir" != "rand" ]]; then
                echo "Error: Invalid wind direction. Valid values are 'left', 'right', or 'rand'."
                show_help
                exit 1
            fi
            shift
            ;;
        -wd|--wind-dir)
            wind_dir="$2"
            # Validate input
            if [[ "$wind_dir" != "left" && "$wind_dir" != "right" && "$wind_dir" != "rand" ]]; then
                echo "Error: Invalid wind direction. Valid values are 'left', 'right', or 'rand'."
                show_help
                exit 1
            fi
            shift 2
            ;;
        *)
            echo "Error: Invalid option '$1'"
            show_help
            exit 1
            ;;
    esac
done

##############################################################################
# Main script execution below
##############################################################################

# Initialize the screen
initialize_screen

# Start randomization in background if enabled
randomize_vars &

# Setup for resize handling
resize_stabilizing=false
stabilization_counter=0

# Main animation loop
while true; do
    # Check for quit key
    read -s -n 1 -t 0.001 key
    if [[ $key == "q" ]]; then
        cleanup
    fi
    
    # Update wind parameters periodically
    (( loop_counter++ % 3 == 0 )) && {
        update_wind_direction
        update_wind_strength
    }
    
    # Handle resize events with debouncing
    if [[ "$resize_pending" == "true" ]]; then
        current_time=$(date +%s.%N)
        time_diff=$(echo "$current_time - $last_resize_time" | bc)
        
        if (( $(echo "$time_diff > $resize_debounce_delay" | bc -l) )); then
            process_resize
        else
            sleep 0.001  # Brief pause while waiting for resize to settle
            continue
        fi
    fi
    
    # Use local copies of dimensions for thread safety
    frame_width=$width
    frame_height=$height

    # Only render with valid dimensions
    if [[ "$frame_width" -gt 0 && "$frame_height" -gt 0 ]]; then
        # Post-resize stabilization
        if [[ "$resize_stabilizing" == true ]]; then
            ((stabilization_counter++))
            if [[ $stabilization_counter -ge 15 ]]; then
                # Stabilization complete
                resize_stabilizing=false
                stabilization_counter=0
                clear_entire_screen
            else
                sleep 0.01  # Pause during stabilization
                continue
            fi
        fi
        
        # Draw frame
        place_raindrop
        move_raindrops
    fi
    
    # Control animation speed
    sleep 0.01
done
